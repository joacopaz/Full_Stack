.container {
	/* To set up a grid you need container and items. Display: grid or inline-grid, the default contains 1 column */
	display: grid;
	width: x;
	height: y;

	grid-template-columns: 100px 200px 10%; /* To determine columns you use grid-template-columns. If you use a % it would be base off the grid's width */
	grid-template-rows: 100px 200px 10%; /* To determine rows you use grid-template-row. If you use a % it would be base off the grid's height */
	grid-template: 100px 200px 10% / 100px 200px 10%; /* You can use grid-template to determine rows / columns */
	grid-template: 1fr 2fr 1fr / 3fr 1fr 2fr; /* The measure fr divides into fractions of the available space */
	grid-template-columns: repeat(3, 1fr); /* 3 1fr columns */
	grid-template: repeat(3, 1fr 2fr) / 2fr 3fr; /* 6: 1fr, 2fr, 1fr, 2fr, 1fr, 2fr columns */
	/* minmax(value, value) makes an element have a minimum and maximum val */
	grid-template-columns: 1fr minmax(100px, 500px) 1fr; /* second column will never be less than 100 or larger than 500. This only works if we have variable widths or heights (not fixed) */
	/* Gap can set row and column gaps */
	gap: 20px 10px;

	/* ADVANCED SECTION */
	grid-template-areas: "classNameForColumn1Row1 classNameForColumn2Row1" "classNameForColumn1Row2 classNameForColumn2Row2"; /* this creates grid templates for each class section */
	grid-area: classNameForColumnRow1; /* grid-area determines what class area will this item occupy, if the class/tag is header, the area should be the header, etc */
	/* Grid-area can overlap and you can use Z-index to set visibility */
	justify-items: center; /* Justify items aligns the content inside of the items horizontally. If no width is specified it will stretch the width of the col  */
	justify-content: center; /* Justify-content aligns the grid items horizontally within their parent container */
	align-items: center; /* Aligns items from top to bottom, if we specify height they will not stretch the row height */
	align-content: center; /* Aligns grid items vertically */
	/* implicit-grid kicks in when more content than specified is showed, it auto-adds rows */
	grid-auto-rows: 50px; /* specifies the behaviour of auto added rows */
	grid-auto-columns: 1fr; /* specifies the behaviour of auto added cols, if multiple values it adds first the first value then the second and repeat */
	grid-auto-flow: column dense; /* control how new content is added (fills from left to right, top to bottom and dense specifies if it should attempt to fill every hole in the layout earlier */
}

.items {
	/* to determine how much space an element occupies. In this case the element occupies row 1 and 2 (3 not included) */
	grid-row: 1 / 3;
	/* You can use span to tell that it has to occupy the total of a value you want to occupy */
	grid-column: 4 / span 2; /* occupies columns 4 and 5 */
	grid-area: 6 / 8 / span3 / span1; /* grid-area allows for grid-row-start, grid-column-sart, grid-row-end, grid-column-end. */
	justify-self: center; /* will override justify-items */
	align-self: center; /* will override align-items */
}
