/* You can target attributes by using [] to target them */
img[src*="winter"] {
	/* This targets any img containing winter inside */
	height: 50px;
}
[href] {
	/* this targets any element containing href */
	color: magenta;
}

/* pseudo classes */
p:hover {
	background-color: lime;
}

/* chaining */
h1 .special {
	/* targets the h1 that contain the class special */
}

h1,
h2,
h3, /* targets h1, h2, h3 and p */
p {
}

/* examples */
/* selects all the li that contain the class main list */
li.main-list {
}

/* selects all the lis inside the class main list */
.main-list li {
}

/* !Important makes it the top specificity */
p {
	color: blue !important;
}

/* Using margin to center content */
div {
	width: 400px;
	margin: 0 auto; /* 0 margin on the top and bottom and auto on the sides centers it */
}

/* min/max width height */
p {
	min-width: none;
	max-width: none;
	min-height: none;
	max-height: none;
}

/* overflow (exceeds parent container): hidden hides excess, scroll adds a scrollbar, visible (default value)*/
p {
	overflow: auto; /* you can use overflow-x or overflow-y and this applies to the children */
} /* setting overflow: hidden makes it not show if it exceeds, good for responsive web design for videos or images */

/* to reset values you can use and change the box type to border-box so its values include the borders */
* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

ul {
	visibility: hidden; /* visibility can be set to hidden, visible or collapse */
	display: none; /* display none instead makes it disappear, hiddne leaves an empty spot */
}

/* display inline (transforms into inline element), inline-block (transforms inline and allows width and height like a box) and block allows for it to take up the whole block */
/* float allows to move an element as far right or left as possible, there must be a width specified or it will assume the full width of its parent */
/* clear specificies how the element behaves when it bumps to each other, can be left (left side wont touch any other element within the same container) right both or none */
/* You can add custom fonts with files with @font-face, you SHOULD DEFINE IT AT THE TOP OF THE SHEET. */

@font-face {
	font-family: "TheNameIPlease";
	src: url("./CSS\ MDN.txt") format("woff2"),
		/* url should be the font file, the format can be woff2 (the most progressive), woff, ttf or otf */
			url("anotherURL") format("anotherFormat");
}
p {
	font-family: "TheNameIPlease", sans-serif;
}

a {
	color: blue;
	cursor: pointer; /* Cursor determines what happens to the cursor, it should be added to general tags (a) not :hover */
}
a:hover {
	color: red; /* Hover is great for links being hovered, or any element */
}

/* Links have a couple of pseudo-classes: :link (unvisited), :visited, :hover, :active (clicked). Order matters, you should place them in the order one would interact with the link */
a:link,
a:visited,
a:hover,
a:active {
	color: red;
}

/* Example of a realistic button */
.realistic-button {
	border: 1px solid #466995;
	border-radius: 10px;
	box-shadow: 0px 4px;
}
.realistic-button:active {
	margin-top: 24px;
	margin-bottom: 16px;
	box-shadow: 0px 0px;
	background-color: #c0d6df;
	color: #ffffff;
}

/* You can select in between 2 items with element+element (selects second element), to add something in between: */
/* This will select the li's that are at least 2, in between, and have breadcrumb as a father */
.breadcrumb li + li::before {
	padding: 10px;
	content: ">";
}
/* This creates for elements that belong to breadcrumb, and are lists that also contain the class location */
.breadcrumb li.location + li.location::before {
	color: gray;
	content: ">";
}

/* Cool breadcrumb effect */
/* #region */

.breadcrumb {
	text-align: left;
}
.breadcrumb li {
	float: left;
}

.breadcrumb a {
	color: #fff;
	background: darkcyan;
	text-decoration: none;
	position: relative;
	height: 30px;
	line-height: 30px;
	text-align: center;
	margin-right: 15px;
	padding: 0 5px;
}

.breadcrumb a::before,
.breadcrumb a::after {
	content: "";
	position: absolute;
	border-color: darkcyan;
	border-style: solid;
	border-width: 15px 5px;
}
.breadcrumb a::before {
	left: -10px;
	border-left-color: transparent;
}
.breadcrumb a::after {
	left: 100%;
	border-color: transparent;
	border-left-color: darkcyan;
}
.breadcrumb a:hover {
	background-color: blue;
}
.breadcrumb a:hover::before {
	border-color: blue;
	border-left-color: transparent;
}
.breadcrumb a:hover::after {
	border-left-color: blue;
}
/* #endregion */

/* Responsibe Web Design Notes

When using relative sizing, ems and rems should be used to size text and dimensions on the page related to text size (i.e. 
padding around text). This creates a consistent layout based on text size. Otherwise, percentages should be used.

Setting a height to auto makes it scale automatically according to the size of parent (an image enlarges or shrinks) you could also set
max-height to 100% to avoid it stretching. Also setting image to display: block helps it having trouble align.*/

/* RECOMMENDED IMAGE RULES */
.container {
	width: 50%;
	height: 200px;
	overflow: hidden; /* hides the portion that exceeds */
}
.container img {
	max-width: 100%; /* this will ensure all the image is always displayed */
	height: auto; /* this guarantees the image remains in proportion when resizing */
	display: block; /* this guarantees it has less issues scaling */
}

/* RECOMMENDED BACKGROUND IMAGE RULES */
body {
	background-image: url("#");
	background-repeat: no-repeat;
	background-position: center;
	background-size: cover;
}

/* Media Queries */

@media only screen and (max-width: 480px) {
	body {
		font-size: 12px;
	}
}
@media only screen and (min-width: 320px) and (max-width: 480px) {
	/* the and operator can chain multiple requirements */
	/* ruleset for 320px - 480px */
}
@media only screen and (min-resolution: 300dpi) {
	/* CSS for high resolution screens */
}
/* You can use comma separated lists if only 1 condition must be met, like an OR */
@media only screen and (min-width: 480px),
	(orientation: landscape /*landscape or portrait, landscape has more width than height*/) {
	/* CSS ruleset */
}
/* Tablet example breakpoint */
@media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {
	/* CSS ruleset */
}
/* Common breakpoints: https://content.codecademy.com/courses/freelance-1/unit-5/screen-sizes.png */
